// Define the required input parameters
params.organism = "homo_sapiens"
params.census_version = "2024-07-01" // version of cellxgene census scvi model and data corpus for reference data
params.tree_file = "$projectDir/meta/master_hierarchy.json" // hierarchy to aggregate predicted classes
params.ref_keys = ["subclass", "class", "family"]  // transferred labels to evaluate
params.subsample_ref = 5 // number of cells per cell type in ref to sample
params.subsample_query = null // number of total cells in query to sample, if null do not subsample
params.relabel_r = "$projectDir/meta/census_map_human.tsv" // harmonized label mapping for references
params.relabel_q = "$projectDir/meta/*_relabel.tsv" // pattern to match multiple relabel files for queries
params.cutoff = 0 // do not threshold class probabilities 
params.remove_unknown = true
params.queries_adata= "$projectDir/queries/*h5ad"
params.seed = 42

// batch keys for scvi integration, must be columns in existing metadata
params.batch_keys = [
  "lau": "sample",
  "pineda": "Batch",
  "lim": "batch",
  "velmeshev": "sample",
  "rosmap": "batch", //old = projid, add string prefix
  "nagy": "batch" //old = orig.ident, addstring prefix
]  

params.query_tissue = [
  "lau": "prefrontal_cortex",
  "pineda": "primary_motor_cortex",
  "lim_Cingulate": "anterior_cingulate_cortex",
  "velmeshev_PFC": "prefrontal_cortex",
  "velmeshev_ACC": "anterior_cingulate_cortex",
  "rosmap": "prefrontal_cortex",
  "nagy": "dorsolateral_prefrontal_cortex"
]

params.ref_split= "tissue"
params.ref_collections = ["Transcriptomic cytoarchitecture reveals principles of human neocortex organization", "SEA-AD: Seattle Alzheimerâ€™s Disease Brain Cell Atlas"]
params.integration_method = "pcaproject"
params.dims = 50
params.max_features = 200
params.k_anchor = 10 
params.k_score = 30
params.k_weight = 20

params.outdir = "$projectDir/results/${params.organism}_ref_${params.subsample_ref}_query_${params.subsample_query}_cutoff_${params.cutoff}_refsplit_${params.ref_split}"  // Directory where outputs will be saved

// split columns and values for subsetting query

// params.disease_columns = [
  // "lau": "",
  // "pineda": "Condition",
  // "lim": "Condition",
  // "velmeshev": "diagnosis",
  // "rosmap": "" 
  // "nagy": ""
// ]  

// params.sex_columns = [
  // "lau": "",
  // "pineda": "Sex",
  // "lim": "",
  // "velmeshev": "sex",
  // "rosmap": "" 
  // "nagy": ""
// ]

// params.age_columns = [
  // "lau": "",
  // "pineda": "",
  // "lim": "",
  // "velmeshev": "age",
  // "rosmap": "" 
  // "nagy": ""
//]


process {
  cache = 'standard'  // Options: 'standard' (default), 'deep', 'lenient', or 'false'
  executor = 'local'  // Options: 'local' (default), 'slurm', 'pbspro', 'sge', 'lsf', 'torque', 'k8s', 'ignite', 'awsbatch', 'gcp', 'azure', 'nomad', 'ssh', 'cromwell', 'nextflow'
 // executor = 'slurm'
 // queue = 'Cargo'
 // memory = '10 GB'
 // time = '30 min'
 // cpus = 4
}

nextflow {
  clean {
    afterRun = true  // Default is false; set to true to clean up automatically
  }
}

profiles {
  conda {
    conda.enabled = true
  }

}
