// Define the required input parameters
params.organism = "homo_sapiens"
params.census_version = "2024-07-01" // version of cellxgene census scvi model and data corpus for reference data
params.ref_keys = ["subclass", "class", "family","global"]  // transferred labels to evaluate
params.subsample_ref = 50 // number of cells per cell type in ref to sample
params.subsample_query = null // number of total cells in query to sample, if null do not subsample
params.relabel_r = "$projectDir/meta/census_map_human.tsv" // harmonized label mapping for references
params.relabel_q = "$projectDir/meta*_relabel.tsv" // pattern to match multiple relabel files for queries
params.cutoff = 0 // do not threshold class probabilities
params.subset_type="sample" 
params.remove_unknown = true
params.queries_adata= "/space/grp/rschwartz/rschwartz/evaluation_data_wrangling/pipeline_queries_all/sample_subsets/*h5ad"
//params.normalization_method="LogNormalize"
params.seed = 42
params.nfeatures = 2000
dag.overwrite = true
// batch keys for scvi integration, must be columns in existing metadata
params.batch_keys = [
  "lau": "sample",
  "pineda": "Batch",
  "lim": "batch",
  "velmeshev": "sample",
  "rosmap": "batch", // old = projid, add string prefix
  "nagy": "batch" // old = in barcode, extracted
]  

params.batch_correct = true // integrate seurat references
params.ref_split= "dataset_id"
params.ref_collections = ["Transcriptomic cytoarchitecture reveals principles of human neocortex organization", "SEA-AD: Seattle Alzheimerâ€™s Disease Brain Cell Atlas"]
params.integration_method = "pcaproject"
params.dims = 50
params.max_features = 200
params.k_anchor = 10 
params.k_score = 30
params.k_weight = 50

params.outdir_prefix="${params.organism}/${params.subset_type}/"
params.outdir = "$projectDir/${params.outdir_prefix}/ref_${params.subsample_ref}_query_${params.subsample_query}_cutoff_${params.cutoff}_refsplit_${params.ref_split}"  // Directory where outputs will be saved


process {
  cache = 'standard'  // Options: 'standard' (default), 'deep', 'lenient', or 'false'
  executor = 'slurm'
  clusterOptions = '-C thrd64 --cpus-per-task=4'
}
executor {
  queueSize = 90 
}

trace {
  enabled = true
  file = "${params.outdir}/trace.txt"
  overwrite = true
}

nextflow {
  clean {
    afterRun = true  // Default is false; set to true to clean up automatically
  }
}

profiles {
  conda {
    conda.enabled = true
  }

}
